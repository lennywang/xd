<configuration>
    <!-- 上下文变量设置,用来定义变量值,其中name的值是变量的名称，value的值时变量定义的值。
        通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="encoding" value="UTF-8"/>
    <property name="access-pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS}|%msg%n"/>
    <property name="normal-pattern"
              value="%d{HH:mm:ss.SSS}[%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %c:%L%n"/>
    <property name="LOG_PATH" value="./logs"/>

    <!--控制台日志-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${normal-pattern}</pattern>
            <charset>${encoding}</charset>
        </encoder>
    </appender>

    <!--访问日志文件-->
    <!-- <appender>是<configuration>的子节点，是负责写日志的组件。
        有两个必要属性name和class。
        name指定appender名称，
        class指定appender的实现类。 -->
    <appender name="access-appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
        <file>${LOG_PATH}/km-access.log</file>
        <prudent>true</prudent>
        <Append>true</Append>
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>${access-pattern}</pattern>
            <charset>${encoding}</charset>
        </encoder>
        <!-- 当发生滚动时的行为  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/km-access.%d{yyyy-MM-dd}.log</fileNamePattern>
            <MaxHistory>90</MaxHistory>
        </rollingPolicy>
    </appender>


    <appender name="api" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/api.log</File>
        <encoder>
            <pattern>${normal-pattern}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/api.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
    </appender>
    <!-- 用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定<appender>
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        additivity:是否向上级logger传递打印信息。默认是true。(这个logger的上级就是上面的root)
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。-->
    <logger name="xuyihao.logback.test" level="DEBUG" additivity="true">
        <appender-ref ref="access-appender"/>
    </logger>

    <!-- 特殊的<logger>元素，是根logger。只有一个level属性，应为已经被命名为"root".
         level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
    <root>
        <appender-ref ref="console"/>
        <appender-ref ref="file-default"/>
        <appender-ref ref="file-error"/>
    </root>
</configuration>